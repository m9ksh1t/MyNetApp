name: Reusable Deployment Workflow
 
on:
  workflow_call:
    inputs:
      cloud_provider:
        description: 'Target Cloud Provider (Azure or AWS)'
        required: true
        type: string
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Common Steps for Code Checkout and Build
      - name: Checkout and Build
        run: |
          echo "Checking out code..."
          git clone https://github.com/m9ksh1t/MyNetApp.git
          cd ./MyNetApp
          echo "Setting up .NET..."
          dotnet build --configuration Release -o ./output
          dotnet publish -c Release -o ./output
 
      # Common Docker Build Step
      - name: Build Docker Image
        run: |
          docker build -t myapp:${{ github.sha }} ./MyNetApp
 
      # Push Docker Image to Registry (Conditional for Azure or AWS)
      - name: Push Docker Image
        run: |
          if [[ "${{ inputs.cloud_provider }}" == "Azure" ]]; then
            echo "Pushing image to Azure Container Registry..."
            az acr login --name ${{ secrets.ACR_NAME }}
            docker tag myapp:${{ github.sha }} bhhelloworld.azurecr.io/myapp:${{ github.sha }}
            docker push bhhelloworld.azurecr.io/myapp:${{ github.sha }}
          elif [[ "${{ inputs.cloud_provider }}" == "AWS" ]]; then
            echo "Pushing image to Amazon ECR..."
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 994536024037.dkr.ecr.eu-north-1.amazonaws.com
            docker tag myapp:${{ github.sha }} 994536024037.dkr.ecr.eu-north-1.amazonaws.com/myapp:${{ github.sha }}
            docker push 994536024037.dkr.ecr.eu-north-1.amazonaws.com/myapp:${{ github.sha }}
          else
            echo "Invalid cloud provider: ${{ inputs.cloud_provider }}"
            exit 1
          fi
 
      # Deployment Steps (Separate for Azure and AWS)
      - name: Deploy to Cloud
        run: |
          if [[ "${{ inputs.cloud_provider }}" == "Azure" ]]; then
            echo "Deploying to Azure..."
            az aks install-cli
            az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}
            kubectl set image deployment/myapp-deployment myapp=bhhelloworld.azurecr.io/myapp:${{ github.sha }}
          elif [[ "${{ inputs.cloud_provider }}" == "AWS" ]]; then
            echo "Deploying to AWS..."
            aws eks update-kubeconfig --region eu-north-1 --name my-eks-cluster
            kubectl apply -f deploymentEKS.yml
          else
            echo "Invalid cloud provider: ${{ inputs.cloud_provider }}"
            exit 1
          fi
