name: Build, Push to ACR, and Deploy to AKS

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-artifact:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET SDK
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build the application
    - name: Build application
      run: dotnet build --configuration Release

    # Publish the application
    - name: Publish application
      run: dotnet publish --configuration Release -o ./publish

    # Upload the publish folder as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: publish-folder
        path: ./output

  build-and-push-container:
    runs-on: ubuntu-latest
    needs: build-and-artifact

    steps:
    # Download the artifact
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: publish-folder

    # Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Log in to Azure Container Registry
    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    # Build Docker Image
    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }} ./output

    # Push Docker Image to ACR
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }}

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push-container

    steps:
    # Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Get AKS credentials
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    # Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    # Create Kubernetes deployment
    - name: Deploy to AKS
      run: |
        echo "
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-dotnet-app
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: my-dotnet-app
          template:
            metadata:
              labels:
                app: my-dotnet-app
            spec:
              containers:
              - name: my-dotnet-app
                image: ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }}
                ports:
                - containerPort: 80
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: my-dotnet-app-service
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 80
          selector:
            app: my-dotnet-app
        " | kubectl apply -f -
